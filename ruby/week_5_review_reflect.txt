Data Structures
1. Why are data structures useful in programming?

Data structures have different qualities that determine the way they are designed to store information in anticipation of the way that they will be used, which leads to increaded efficiency when working with them, both in terms of writing code and computing resources.

Arrays
2. Define "array" and describe the characteristics of an array.

An array is an ordered set of elements. Each element has an index, an integer that counts its position from the beginning, starting at 0. The elements can be objects of any type, and needn't be of the same type. 

3. Give two original examples of data sets that an array might be well-suited for.

Time series data - measurements of the same thing taken at regular intervals over time, like hourly temperature, daily steps walked, or church attendees each week. 

If you are scraping a website you could collect all of the links on a page in an array to be used to get more information later (perhaps after filtering the urls in the array for certain desired or undesired characteristics). 

Hashes
4. Define "hash" and describe the characteristics of a hash.

A hash is a data structure used to store key-value pairs of information. Keys are a non-ordered, non-(or not-necessarily-)integer index that are used to retrieve the information stored in the value object efficiently. A single hash may not have duplicate keys, but values are essentially un-restricted and may be of any data type. There are several data types that are used for keys, but objects and integers are most common due to their convenience and efficiency.

5. Give two original examples of data sets that a hash might be well-suited for.

Hashes are good for storing information that is related but different, because keys can be used to label the data along the distinguishing axis. Extending from #3, a hash could be used to keep track of the same time series across multiple similar measurement sites, like daily temperatures in multiple cities or weekly attendance in various churches or places of worship. 

In web scraping, key-value stores are useful for information is unpredictable in its structure, because new labels can be added on the fly or even be generated by the data itself. NoSQL databases have risen in popularity because of this quality, as opposed to tabular data stores which generally require a more labor- and resource-intensive schema update to create a new column. MongoDB is a key-value store that uses a BSON (essentially "binary JSON") data structure to store its records ("documents", they are called in Mongo). JSON  is (at least at this level of abstraction) the javascript version of hashes.

Iteration
6. Why is iteration useful?

Iteration is extremely useful! Why do you want to write a program in the first place? Very often, it's because you want to do something over and over again, faster than you can could do it yourself, while you have lunch or throw a frisbee or work on the next thing. You write the code to do the "same thing" to arbitrary variations on the same sort of input and create the same sort of output. Iteration is the "over and over" part of this all. Having syntactically clear and efficient ways to do iteration is a great idea for happy programming.

7. Give an example of a real-life task that would require iteration if you wrote an algorithm for it.

Serving customers in a coffee shop
Folding a basket of laundry
Trimming flowers for an arrangement
Pitching a baseball game

Blocks
8. What is a block?

Blocks are small pieces of code that are not stored in variables and can be passed as arguments to methods. Blocks themselves can also accept parameters and return values.  They are denoted by two different choices in notation: curly-brace notation for single-line blocks and do...end notation for multi-line blocks.

9. What is a block parameter, and where does its value come from?

I'm not sure what is meant by "value" here. I was going to blame it on semantic ambiguity, but I'm really just still learning. The block should be passed to a method that has a "yield" statement (but it doesn't have to? it seems like you can pass a block to any old unsuspecting method, even one that doesn't anticipate it by having a parameter for it in its definition nor a yield statement within it, and ruby won't yell and scream about it, which is interesting). The yield statement returns a value, but that's not really the "value" of the _block_, unless the block does not take arguments and always evaluates to the same thing. Actually, I think maybe my brain is messed up on this one by overlapping python terminology. In python, code that just prints something (which a block could do) is distinguished from code that evaluates to something (which a block could do). One is an expression, which has a value, and one is a statement, which does not. So, I pass. It's moments like these that I realize that I am actually a perfectionist. Just walk away, Laur. It's ok to miss one sweet honeybunch

